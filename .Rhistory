title = "Confirmed cases, deaths, and recovered",
subtitle = "Hubei, Rest of China, and Rest of World",
caption = "Source: Johns Hopkins CSSE"
) +
scale_linetype_discrete("Location") +
theme_minimal()
ggsave(here("figures", "confirmed_deaths_recovered.png"), height = 15, width = 20, units = "cm", dpi = 300)
# Countries with at least 100 confirmed cases on 8/3/20
big_case_countries <-
tidied_data %>%
filter(type == "confirmed") %>%
group_by(date, higher) %>%
summarise(n = sum(n)) %>%
ungroup()  %>%
filter(date == max(date)) %>%
arrange(desc(n)) %>%
filter(n > 100) %>%
pull(higher)
tidied_data %>%
mutate(country = case_when(
higher %in% big_case_countries ~ higher,
TRUE                           ~ "Other"
)
) %>%
filter(type == "confirmed") %>%
group_by(date, country) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
ggplot(aes(x = date, y = n)) +
geom_line() +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
facet_wrap(~country)
ggsave(here("figures", "confirmed_cases_atleast100.png"), height = 25, width = 25, units = "cm", dpi = 300)
get_gradient_fit <- function(dta){
num_cases <- dta %>%
filter(date == max(date)) %>%
pull(n)
model <- lm(log(n) ~ date, data = dta)
slope <- coefficients(model)[["date"]]
rsq <- summary(model)$r.squared
return(tibble(
num_cases, slope = slope, r_squared = rsq
))
}
tidied_data %>%
filter(date >= lubridate::dmy("29-02-20")) %>%
filter(higher %in% big_case_countries) %>%
filter(type == "confirmed") %>%
filter(!(higher %in% c("Others","Cruise Ship"))) %>%
group_by(date, higher) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
group_by(higher) %>% nest() %>%
mutate(results = map(data, possibly(get_gradient_fit, otherwise = NA_character_))) %>%
mutate(results_class = map(results, class)) %>%
mutate(results_length = map_dbl(results, length)) %>%
filter(results_length == 3) %>%
select(higher, results) %>%
unnest(results) %>%
mutate(is_china = higher == "China") %>%
arrange(desc(slope)) %>%
ggplot(aes(x = r_squared, y = slope, alpha = log(num_cases))) +
geom_point() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0.7, 1.0)) +
geom_text_repel(aes(label = higher), alpha = 1) +
labs(
x = "R-squared (Higher= more log-linear)",
y = "Slope (Higher= faster % growth rates)",
title = "Steepness of case growth rate against model fit",
subtitle = "Countries with at least 100 cases on 8 March 2020. Darker dots = More cases",
caption = "Source: Johns Hopkins CSSE"
)
ggsave(here("figures", "rate_of_increase_against_model_fit.png"), height = 20, width = 20, units = "cm", dpi = 300)
tidied_data %>%
filter(type == "confirmed") %>%
filter(higher != "Cruise Ship") %>%
group_by(higher, date) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
group_by(higher) %>%
arrange(date) %>%
filter(n >= 100) %>%
mutate(first_date = date[1]) %>%
mutate(days_since_first = date - first_date) %>%
mutate(max_days_since_first = max(days_since_first)) %>%
ungroup() %>%
mutate(country = fct_reorder(higher, desc(max_days_since_first))) %>%
filter(country != "Others") %>%
ggplot(aes(x = days_since_first, y = n)) +
geom_line() +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
facet_wrap(~country) +
labs(
title = "Confirmed cases after first 100 cases",
subtitle = "Arranged by number of days since 100 or more cases",
x = "Days after 100 confirmed cases",
y = "Confirmed cases (log scale)",
caption = "Source: Johns Hopkins CSSE"
)
ggsave("figures/days_since_100.png", height = 20, width = 20, units = "cm", dpi = 300)
days_since_data <-
tidied_data %>%
filter(type == "confirmed") %>%
filter(higher != "Cruise Ship") %>%
group_by(higher, date) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
group_by(higher) %>%
arrange(date) %>%
filter(n >= 100) %>%
mutate(first_date = date[1]) %>%
mutate(days_since_first = date - first_date) %>%
mutate(max_days_since_first = max(days_since_first)) %>%
ungroup() %>%
mutate(country = fct_reorder(higher, desc(max_days_since_first))) %>%
mutate(country_label = glue::glue("{country}, {max_days_since_first} days")) %>%
filter(country != "Others")
days_since_data %>%
ggplot(aes(x = days_since_first, y = n, group = country, colour = country_label)) +
geom_line() +
ggrepel::geom_text_repel(aes(label = country_label), show.legend = FALSE, segment.color = "grey", nudge_x = 10,
data = days_since_data %>%
group_by(country) %>%
filter(days_since_first == max(days_since_first)) %>%
filter(days_since_first >= 10)
) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
labs(
title = "Confirmed cases after first 100 cases",
subtitle = "Arranged by number of days since 100 or more cases. Countries with 10 or more days labelled",
x = "Days after 100 confirmed cases",
y = "Confirmed cases (log scale)",
caption = "Source: Johns Hopkins CSSE"
) +
theme_minimal() +
theme(
legend.position = "none"
)
ggsave(here("figures", "days_since_100_oneplot.png"), height = 15, width = 25, units = "cm", dpi = 300)
tidied_data %>%
mutate(
place_category = case_when(
higher == "China" & lower == "Hubei" ~ "Hubei, China",
higher == "China" & lower != "Hubei" ~ "Rest of China",
TRUE                                 ~ "Rest of World"
)
) %>%
group_by(date, place_category, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
filter(n >= 100) %>%
ggplot(aes(x = date, y = n, group = type, linetype = type)) +
geom_line() +
facet_wrap(~place_category) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
labs(
y = "Number of cases",
x = "Date",
title = "Confirmed, Recovered, Deaths",
caption = "Source: Johns Hopkins CSSE"
)
ggsave(here("figures", "confirmed_deaths_recovered_china_elsewhere.png"), height = 20, width = 30, units = "cm", dpi = 300)
tidied_data %>%
mutate(
place_category = case_when(
higher == "China" & lower == "Hubei" ~ "Hubei, China",
higher == "China" & lower != "Hubei" ~ "Rest of China",
TRUE                                 ~ "Rest of World"
)
) %>%
filter(type != "recovered") %>%
group_by(date, place_category, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
filter(place_category == "Hubei, China") %>%
group_by(type) %>%
arrange(date) %>%
mutate(days_since_start = date - date[1]) %>%
ggplot(aes(x = days_since_start, y = n, linetype = type, group = type)) +
geom_line() +
scale_y_log10(
breaks = 10^(1:7),
minor_breaks = 10 ^ seq(1, 7, by = 0.1),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)
tidied_data %>%
mutate(
place_category = case_when(
higher == "China" & lower == "Hubei" ~ "Hubei, China",
higher == "China" & lower != "Hubei" ~ "Rest of China",
TRUE                                 ~ "Rest of World"
)
) %>%
filter(type != "recovered") %>%
group_by(date, place_category, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
filter(place_category == "Hubei, China") %>%
group_by(type) %>%
arrange(date) %>%
mutate(days_since_start = date - date[1]) %>%
ungroup() %>%
mutate(log_n = log(n, 10)) %>%
ggplot(aes(x = days_since_start, y = log_n, linetype = type, group = type)) +
geom_line() +
geom_line(aes(x = days_since_start, y = log_n - (4.84 - 3.50)),
colour = "red", linetype = "dotdash",
data =
tidied_data %>%
mutate(
place_category = case_when(
higher == "China" & lower == "Hubei" ~ "Hubei, China",
higher == "China" & lower != "Hubei" ~ "Rest of China",
TRUE                                 ~ "Rest of World"
)
) %>%
filter(type == "confirmed") %>%
group_by(date, place_category, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
filter(place_category == "Hubei, China") %>%
group_by(type) %>%
arrange(date) %>%
mutate(days_since_start = date - date[1]) %>%
ungroup() %>%
mutate(log_n = log(n, 10))
)
hb_log_mod <-
tidied_data %>%
mutate(
place_category = case_when(
higher == "China" & lower == "Hubei" ~ "Hubei, China",
higher == "China" & lower != "Hubei" ~ "Rest of China",
TRUE                                 ~ "Rest of World"
)
) %>%
filter(type != "recovered") %>%
group_by(date, place_category, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
filter(place_category == "Hubei, China") %>%
select(-place_category) %>%
spread(type, n) %>%
lm(log(deaths, 10) ~ log(confirmed, 10), data =. )
hb_log_mod %>%
summary()
wide_hb_data <-
tidied_data %>%
mutate(
place_category = case_when(
higher == "China" & lower == "Hubei" ~ "Hubei, China",
higher == "China" & lower != "Hubei" ~ "Rest of China",
TRUE                                 ~ "Rest of World"
)
) %>%
filter(type != "recovered") %>%
group_by(date, place_category, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
filter(place_category == "Hubei, China") %>%
select(-place_category) %>%
spread(type, n)
wide_hb_data
wide_hb_data %>%
mutate(prediction = 10 ^ predict(hb_log_mod, .)) %>%
mutate(eyeballing = confirmed *  10 ^ -(4.84 - 3.50)) %>%
gather(-date, key = "type", value = "n") %>%
mutate(type = case_when(
type == "confirmed" ~ "Confirmed Cases",
type == "deaths"   ~ "Confirmed Deaths",
type == "prediction" ~ "Predicted Deaths (Linear regression)",
type == "eyeballing" ~ "Predicted Deaths (Eyeballing latest values)"
)) %>%
ggplot(aes(x = date, y= n, linetype = type, colour = type)) +
geom_line() +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
scale_colour_manual(values = c("black", "black", "red", "green")) +
scale_linetype_manual(values = c("solid", "dotdash", "dashed", "dashed")) +
labs(
title = "Relationship between confirmed cases and confirmed deaths, Hubei, China",
caption = "Model prediction formula within lm: log(deaths, 10) ~ log(confirmed, 10)",
subtitle = "Predicted mortality rate: 4.3%, Adjusted R-squared of fit: 0.98",
x = "Date",
y = "Number of cases",
linetype = "Case/Prediction type",
colour = "Case/Prediction type"
) +
theme_minimal()
ggsave(here("figures", "hubei_case_mort_pred.png"), height = 15, width = 25, units = "cm")
hb_log_mod_rev <-
tidied_data %>%
mutate(
place_category = case_when(
higher == "China" & lower == "Hubei" ~ "Hubei, China",
higher == "China" & lower != "Hubei" ~ "Rest of China",
TRUE                                 ~ "Rest of World"
)
) %>%
filter(type != "recovered") %>%
group_by(date, place_category, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
filter(place_category == "Hubei, China") %>%
select(-place_category) %>%
spread(type, n) %>%
lm(log(confirmed, 10) ~ log(deaths, 10), data =. )
hb_log_mod_rev %>%
summary()
tidied_data %>%
filter(higher == "United Kingdom") %>%
filter(type != "recovered") %>%
group_by(date, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
spread(type, n)  %>%
filter(deaths >= 5) %>%
mutate(
predicted_confirmed = 10^predict(hb_log_mod_rev, newdata = .)
) %>%
gather(key = "type", value = "n", -date) %>%
ggplot(aes(x = date, y = n, group = type, shape = type, colour = type)) +
geom_line()
tidied_data %>%
filter(higher == "United Kingdom") %>%
filter(type != "recovered") %>%
group_by(date, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
spread(type, n)  %>%
filter(deaths >= 5) %>%
mutate(
predicted_confirmed = 10^predict(hb_log_mod_rev, newdata = .)
) %>%
gather(key = "type", value = "n", -date) %>%
ggplot(aes(x = date, y = n, group = type, linetype = type, colour = type)) +
geom_line()
tidied_data %>%
filter(higher == "United Kingdom") %>%
filter(type != "recovered") %>%
group_by(date, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
spread(type, n)  %>%
filter(deaths >= 5) %>%
mutate(
predicted_confirmed = 10^predict(hb_log_mod_rev, newdata = .)
) %>%
gather(key = "type", value = "n", -date) %>%
ggplot(aes(x = date, y = n, group = type, linetype = type, colour = type)) +
geom_line()  +
scale_colour_manual(values = c("black", "red", "black")) +
scale_linetype_manual(values = c("solid", "solid", "dashed"))
?scale_y_log10
tidied_data %>%
filter(higher == "United Kingdom") %>%
filter(type != "recovered") %>%
group_by(date, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
spread(type, n)  %>%
filter(deaths >= 5) %>%
mutate(
predicted_confirmed = 10^predict(hb_log_mod_rev, newdata = .)
) %>%
gather(key = "type", value = "n", -date) %>%
ggplot(aes(x = date, y = n, group = type, linetype = type, colour = type)) +
geom_line()  +
scale_colour_manual(values = c("black", "red", "black")) +
scale_linetype_manual(values = c("solid", "solid", "dashed")) +
scale_y_log10(breaks = c(5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000))
tidied_data %>%
filter(higher == "United Kingdom") %>%
filter(type != "recovered") %>%
group_by(date, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
spread(type, n)  %>%
filter(deaths >= 5) %>%
mutate(
predicted_confirmed = 10^predict(hb_log_mod_rev, newdata = .)
) %>%
gather(key = "type", value = "n", -date) %>%
ggplot(aes(x = date, y = n, group = type, linetype = type, colour = type)) +
geom_line()  +
scale_colour_manual(values = c("black", "red", "black")) +
scale_linetype_manual(values = c("solid", "solid", "dashed")) +
scale_y_log10(breaks = c(5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000)) +
labs(
x = "Date",
y = "Number of cases (log scale)",
title = "Confirmed cases, confirmed deaths, and predicted number of cases based on number of deaths",
subtitle = "Predicted number of cases made by assuming the correspondence between confirmed cases and\n
confirmed deaths observed in Hubei, China, also apply to other countries"
)
tidied_data %>%
filter(higher == "United Kingdom") %>%
filter(type != "recovered") %>%
group_by(date, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
spread(type, n)  %>%
filter(deaths >= 5) %>%
mutate(
predicted_confirmed = 10^predict(hb_log_mod_rev, newdata = .)
) %>%
gather(key = "type", value = "n", -date) %>%
ggplot(aes(x = date, y = n, group = type, linetype = type, colour = type)) +
geom_line()  +
scale_colour_manual(values = c("black", "red", "black")) +
scale_linetype_manual(values = c("solid", "solid", "dashed")) +
scale_y_log10(breaks = c(5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000)) +
labs(
x = "Date",
y = "Number of cases (log scale)",
title = "Confirmed cases, confirmed deaths, and predicted number of cases based on number of deaths",
subtitle = "Predicted number of cases made by assuming the correspondence between confirmed cases and
confirmed deaths observed in Hubei, China, also apply to other countries"
)
tidied_data %>%
filter(higher == "United Kingdom") %>%
filter(type != "recovered") %>%
group_by(date, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
spread(type, n)  %>%
filter(deaths >= 5) %>%
mutate(
predicted_confirmed = 10^predict(hb_log_mod_rev, newdata = .)
) %>%
gather(key = "type", value = "n", -date) %>%
ggplot(aes(x = date, y = n, group = type, linetype = type, colour = type)) +
geom_line()  +
scale_colour_manual(values = c("black", "red", "black")) +
scale_linetype_manual(values = c("solid", "solid", "dashed")) +
scale_y_log10(breaks = c(5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000)) +
labs(
x = "Date",
y = "Number of cases (log scale)",
title = "UK: Confirmed cases, confirmed deaths,
and predicted number of cases based on number of deaths",
subtitle = "Predicted number of cases made by assuming the correspondence between confirmed cases and
confirmed deaths observed in Hubei, China, also applies to other countries"
)
tidied_data %>%
filter(higher == "United Kingdom") %>%
filter(type != "recovered") %>%
group_by(date, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
spread(type, n)  %>%
filter(deaths >= 5) %>%
mutate(
predicted_confirmed = 10^predict(hb_log_mod_rev, newdata = .)
) %>%
gather(key = "type", value = "n", -date) %>%
ggplot(aes(x = date, y = n, group = type, linetype = type, colour = type)) +
geom_line()  +
scale_colour_manual(values = c("black", "red", "black")) +
scale_linetype_manual(values = c("solid", "solid", "dashed")) +
scale_y_log10(breaks = c(5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000)) +
labs(
x = "Date",
y = "Number of cases (log scale)",
title = "UK: Confirmed cases, confirmed deaths,
and predicted number of cases based on number of deaths",
subtitle = "Predicted number of cases made by assuming the correspondence between confirmed cases and
confirmed deaths observed in Hubei, China, also applies to other countries",
caption = "From first date where five or more cumulative confirmed deaths were recorded in the UK"
)
tidied_data %>%
filter(higher == "United Kingdom") %>%
filter(type != "recovered") %>%
group_by(date, type) %>%
summarise(n = sum(n)) %>%
ungroup() %>%
spread(type, n)  %>%
filter(deaths >= 5) %>%
mutate(
predicted_confirmed = 10^predict(hb_log_mod_rev, newdata = .)
) %>%
gather(key = "type", value = "n", -date) %>%
ggplot(aes(x = date, y = n, group = type, linetype = type, colour = type)) +
geom_line()  +
scale_colour_manual(values = c("black", "red", "black")) +
scale_linetype_manual(values = c("solid", "solid", "dashed")) +
scale_y_log10(breaks = c(5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000)) +
labs(
x = "Date",
y = "Number of cases (log scale)",
title = "UK: Confirmed cases, confirmed deaths,
and predicted number of cases based on number of deaths",
subtitle = "Predicted number of cases made by assuming the correspondence between confirmed cases and
confirmed deaths observed in Hubei, China, also applies to other countries",
caption = "From first date where five or more cumulative confirmed deaths were recorded in the UK"
)
ggsave(here("figures", "uk_confirmed_predicted_from_hubei.png"), height = 15, width = 20, units = "cm", dpi = 300)
